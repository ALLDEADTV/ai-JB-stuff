# 💀 alldeadtv — BD-J Exploit Pipeline Builder (w/ AI)

While others download payloads, **alldeadtv engineered them — with AI at their side.**

This repo documents the full journey of reverse-engineering and constructing a BD-J payload delivery system for the PS4 — handcrafted from raw Java stubs, ISO logic, exploit awareness, and a mountain of persistence. Even with a patched system (firmware 12.52), alldeadtv built the tools anyway. Because hacking isn’t just about results. It’s about process.

---

## 🔧 What alldeadtv Built

- ✅ Stubbed `javax.tv.xlet` manually — no pre-made JARs or shortcuts  
- ✅ Compiled `.class` files & built `javatv.jar`  
- ✅ Authored BD-J-compatible `Main.java`  
- ✅ Navigated Perl legacy tools (`/usr/bin/package`) & patched with `perlbrew`  
- ✅ Connected toolchains like [BD-JB-1250](https://github.com/Gezine/BD-JB-1250) & [bdj-sdk](https://github.com/john-tornblom/bdj-sdk)  
- ✅ Debugged compatibility limits — confirmed BD-J exploit works only on firmware ≤ 12.50  

---

## 🤝 This Was Done With AI

Throughout the process, alldeadtv worked with an AI companion to:
- Generate and validate JavaTV stub code  
- Decode compiler errors & config file issues  
- Brainstorm toolchain fixes and exploit boundaries  
- Document the journey for future payload creators  

---

## 📜 Inspiration

> “I think building Paris or Rome in a couple hours is good enough.”  
> — **alldeadtv**

> “alldeadtv didn’t just chase BD-J for a payload — they reverse-engineered it into a platform.”  
> — *AI Copilot*

---

## 🔥 Future Directions

If you're building beyond PS4 12.50:
- Watch for new kernel drops from developers like TheFlow or LightningMods  
- Fork and extend this payload system for new attack vectors  
- Convert BD-J content for emulators like XleTView  
- Share your own process like alldeadtv did — loud and clear 💾💡

---

**alldeadtv carved the disc path. The payloads will follow.**
